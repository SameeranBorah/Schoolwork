/*
 * John F. Lake, Jr. 
 * CSE30341, Project 2
 * Myshell
 *
 */
//Debugging: 
//TODO: fix error messages
//TODO: Fix start command
//TODO: Implement kill, stop, and continue

//#define DEBUG 1


//Includes: 
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

//Defines: 
#define BUF_LEN 4096
#define MAX_ARGS 100
#define EXIT 1
#define START 2
#define WAIT 3
#define RUN 4
#define KILL 5
#define STOP 6
#define CONT 7




/*
 * interpretCommand() determines if a command exists, and returns an integer corresponding with that action
 * @param command The command the user has entered (args[0]).
 * @return int
 */
int interpretCommand(char * command){
	if(strcmp(command,"quit") == 0 || strcmp(command,"Quit") == 0 || strcmp(command,"exit") == 0 || strcmp(command,"Exit") == 0)
		return EXIT;
	else if(strcmp(command,"start")==0) 
		return START;
	else if(strcmp(command,"wait")==0) 
		return WAIT;
	else if(strcmp(command,"run")==0) 
		return RUN;
	else if(strcmp(command,"kill")==0) 
		return KILL;
	else if(strcmp(command,"stop")==0) 
		return STOP;
	else if(strcmp(command,"continue")==0) 
		return CONT;
	else
		return -1;
}


/*
 *Simple function for making error messages cleaner: 
 *
 */
void error(int num,int argFlag){
	if(argFlag == 1){
		printf("myshell: error: wrong number of arguments!");
	}else
		printf("myshell: error: %s",strerror(num));
}

/*
 * getInput() returns the number of arguments read
 * @param input The input string from the user.
 * @param args The array of arguments from the user.
 * @param return int (Number of arguments when successful, -1 if a failure occurs)
 */
int getInput(char *input, char ** args){
	//Get user input: 
	if(fgets(input,BUF_LEN,stdin)!=NULL){
		//If they enter nothing, return 0.
		if(strcmp(input,"\n")==0){
			return 0;
		}
		int argsNo=0;
		while(argsNo<MAX_ARGS){
			//Strtok needs input of NULL after first token, so you need to process the first differently: 
			if(argsNo==0){
				if((args[argsNo] = strtok(input,"	 \n"))==NULL){
					return -1;
				}else{	
					argsNo++;
				}
			//After the first, call strtok with NULL:
			}else{
				if((args[argsNo] = strtok(NULL,"	 \n"))==NULL){
					break;
				}else{
					argsNo++;
				}
			}
		}
		return argsNo;
	}else{
		return -1;
	}
}


/*Functions to make the main function cleaner*/

//Start command: 
void start(int numArgs, pid_t pid, char** args){ 
//Here, we will fork and call the execvp() function: 
	if(numArgs == 1) error(0,1);
	else{
		//Fork and create a child process:
		if((pid = fork())<0) error(errno,0);
	
		//Child process:
		else if(pid==0){
			//Execute the program, with args+2 being the pointer to the array of arguments.
			if(execvp(args[1],args+1)<0) error(errno,0);
		//Parent Process:
		}else{
			printf("myshell: process %d started.",pid);
		}
	}
}

//wait command: 
void waitFor(int s, int status, pid_t pid){
	if((pid = wait(&status))<0){
		error(errno,0);
	}else{
		if(WIFSIGNALED(status)){	
			s = WTERMSIG(status);
			printf("myshell: process %d exited with signal %d: %s",pid,s,strsignal(s));
		}else if(WIFEXITED(status)){
			printf("myshell: process %d exited normally with return value 0",pid);
		}
	}
}



/*
 *The main function which runs the myshell program
 *If the user calls ./myshell [NAME], they can place their name in the promt (like a bash shell)
 */
int main(int argc, char ** argv){
	int personal = 0;
	if(argc >1) personal = 1;

	char * args[MAX_ARGS];
	char input[BUF_LEN];
	int shellRunning = 1;
	pid_t pid;

	while(shellRunning){

		//Allow the user to pass their name as an argument (simply cosmetic):
		if(personal)
			printf("\nmyshell-%s-$",argv[1]);
		else
			printf("\nmyshell>");


		int numArgs;
		int status;
		int s;
		if((numArgs = getInput(input,args))==-1){
			shellRunning = 0;
		}else if (numArgs == 0){

		}else {
			//Interpret/use the input: 
			switch(interpretCommand(args[0])){
				case EXIT:
					shellRunning  = 0;
					break;
				case START:
					start(numArgs,pid,args);
					break;
				case WAIT:
					waitFor(s,status,pid);			
					break;
				case RUN:
					//Very similar to start:
					//Here, we will fork and call the execvp() function: 
					if(numArgs == 1) error(0,1);
					else{

						//Fork/create child:
						if((pid = fork())<0) error(errno,0);

						//Child process:
						else if(pid==0){
							//Execute the program, with args+2 being the pointer to the array of arguments.
							if(execvp(args[1],args+1)<0) error(errno,0);
						//Parent:
						}else{
							if((pid = waitpid(pid,&status,0))<0)error(errno,0);
							else{
								if(WIFSIGNALED(status)){	
									s = WTERMSIG(status);
									printf("myshell: process %d exited abnormally with signal %d: %s",pid,s,strsignal(s));
								}else if(WIFEXITED(status)){
									printf("myshell: process %d exited normally with return value 0",pid);
								}
							}
						}
					}
					break;
					//Right here, we're going to issue SIGKILL, SIGSTOP, and SIGCONT signals to the processes
				case KILL:
					if(numArgs != 2){
						error(0,1);
					}else{
						pid = atoi(args[1]);	
						if(kill(pid,SIGKILL)<0) error(errno,0);
						else printf("myshell: process %d killed",pid);
					}
					break;
				case STOP:
					if(numArgs != 2){
						error(0,1);
					}else{
						pid = atoi(args[1]);	
						if(kill(pid,SIGSTOP)<0) error(errno,0);
						else printf("myshell: process %d stopped",pid);
					}
					break;
				case CONT:
					if(numArgs != 2){
						error(0,1);
					}else{
						pid = atoi(args[1]);	
						if(kill(pid,SIGCONT)<0) error(errno,0);
						else printf("myshell: process %d continued",pid);
					}
					break;
				case -1:
					printf("myshell: command not recognized: %s",args[0]);
					break;
			}
		}
	}
	exit(0);
}
